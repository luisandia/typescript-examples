{"ast":null,"code":"var _jsxFileName = \"/Users/luisandia/lsad/typescript/react-todo-ts/ui/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { withApollo } from \"../lib/apollo\";\nimport { compose } from \"recompose\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nconst tasksQuery = gql`\n  query Tasks($status: TaskStatus) {\n    tasks(status: $status) {\n      id\n      title\n      status\n    }\n  }\n`;\n\nconst IndexPage = props => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(tasksQuery, {\n    variables: {\n      status: \"active\"\n    }\n  });\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else if (error) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    }, \"An error occurred.\");\n  }\n\n  const tasks = data === null || data === void 0 ? void 0 : data.tasks;\n  return tasks && tasks.length ? __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, tasks.map(task => {\n    return __jsx(\"li\", {\n      key: task.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }\n    }, task.title);\n  })) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, \"There are no tasks here.\");\n};\n\nconst IndexPageWithApollo = compose(withApollo({\n  ssr: true\n}) // withAuth(),\n)(IndexPage);\nexport default IndexPageWithApollo;","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/ui/pages/index.tsx"],"names":["React","withApollo","compose","gql","useQuery","tasksQuery","IndexPage","props","loading","error","data","variables","status","tasks","length","map","task","id","title","IndexPageWithApollo","ssr"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,UAAU,GAAGF,GAAI;;;;;;;;CAAvB;;AA0BA,MAAMG,SAAwC,GAAIC,KAAD,IAAW;AAC1D,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CACvCC,UADuC,EAEvC;AACEM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV;AADb,GAFuC,CAAzC;;AAOA,MAAIJ,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFD,MAEO,IAAIC,KAAJ,EAAW;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD;;AACD,QAAMI,KAAK,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,KAApB;AAEA,SAAOA,KAAK,IAAIA,KAAK,CAACC,MAAf,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACnB,WAAO;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACE,KAAxB,CAAP;AACD,GAFA,CADH,CADK,GAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAPF;AASD,CAxBD;;AA4BA,MAAMC,mBAAmB,GAAGjB,OAAO,CACjCD,UAAU,CAAC;AAAEmB,EAAAA,GAAG,EAAE;AAAP,CAAD,CADuB,CAEjC;AAFiC,CAAP,CAG1Bd,SAH0B,CAA5B;AAIA,eAAea,mBAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { withApollo } from \"../lib/apollo\";\nimport { useTasksQuery, TaskStatus } from \"../generated/graphql\";\nimport { compose } from \"recompose\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nconst tasksQuery = gql`\n  query Tasks($status: TaskStatus) {\n    tasks(status: $status) {\n      id\n      title\n      status\n    }\n  }\n`;\n\ninterface TasksQuery {\n  tasks: {\n    id: number;\n    title: string;\n    status: string;\n  }[];\n}\n\ninterface TasksQueryVariables {\n  status: string;\n}\n\ninterface InitialProps {}\n\ninterface Props extends InitialProps {}\n\nconst IndexPage: NextPage<Props, InitialProps> = (props) => {\n  const { loading, error, data } = useQuery<TasksQuery, TasksQueryVariables>(\n    tasksQuery,\n    {\n      variables: { status: \"active\" },\n    }\n  );\n\n  if (loading) {\n    return <p>Loading...</p>;\n  } else if (error) {\n    return <p>An error occurred.</p>;\n  }\n  const tasks = data?.tasks;\n\n  return tasks && tasks.length ? (\n    <ul>\n      {tasks.map((task) => {\n        return <li key={task.id}>{task.title}</li>;\n      })}\n    </ul>\n  ) : (\n    <p>There are no tasks here.</p>\n  );\n};\n\n\n\nconst IndexPageWithApollo = compose(\n  withApollo({ ssr: true })\n  // withAuth(),\n)(IndexPage);\nexport default IndexPageWithApollo;\n"]},"metadata":{},"sourceType":"module"}