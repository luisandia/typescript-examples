{"version":3,"file":"static/webpack/static/development/pages/index.js.2f04f78733f204666026.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { withApollo } from \"../lib/apollo\";\nimport { useTasksQuery, TaskStatus } from \"../generated/graphql\";\nimport { compose } from \"recompose\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nconst tasksQuery = gql`\n  query Tasks($status: TaskStatus) {\n    tasks(status: $status) {\n      id\n      title\n      status\n    }\n  }\n`;\n\ninterface TasksQuery {\n  tasks: {\n    id: number;\n    title: string;\n    status: string;\n  }[];\n}\n\ninterface TasksQueryVariables {\n  status: string;\n}\n\ninterface InitialProps {}\n\ninterface Props extends InitialProps {}\n\nconst IndexPage: NextPage<Props, InitialProps> = (props) => {\n  const { loading, error, data } = useQuery<TasksQuery, TasksQueryVariables>(\n    tasksQuery,\n    {\n      variables: { status: \"active\" },\n    }\n  );\n\n  if (loading) {\n    return <p>Loading...</p>;\n  } else if (error) {\n    return <p>An error occurred.</p>;\n  }\n  const tasks = data?.tasks;\n\n  return tasks && tasks.length ? (\n    <ul>\n      {tasks.map((task) => {\n        return <li key={task.id}>{task.title}</li>;\n      })}\n    </ul>\n  ) : (\n    <p>There are no tasks here.</p>\n  );\n};\n\n\n\nconst IndexPageWithApollo = compose(\n  withApollo({ ssr: true })\n  // withAuth(),\n)(IndexPage);\nexport default IndexPageWithApollo;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAyBA;AAAA;AAIA;AAAA;AAAA;AADA;AAHA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AAAA;AADA;AAIA;;;;A","sourceRoot":""}