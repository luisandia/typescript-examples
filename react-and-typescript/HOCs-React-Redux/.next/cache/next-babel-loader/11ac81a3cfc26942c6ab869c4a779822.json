{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst defaultState = {\n  tasks: []\n};\nexport const reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'FETCH_TASKS':\n      return _objectSpread({}, state, {\n        tasks: action.tasks\n      });\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-and-typescript/HOCs-React-Redux/reducer.ts"],"names":["defaultState","tasks","reducer","state","action","type"],"mappings":";;;;;;AAOA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,MAAMC,OAAO,GAAG,CACrBC,KAAe,GAAGH,YADG,EAErBI,MAFqB,KAGlB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,+BACKF,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAFhB;AAFJ;;AAOA,SAAOE,KAAP;AACD,CAZM","sourcesContent":["import { Task } from './types';\nimport { FetchTasksAction } from './actions';\n\nexport interface AppState {\n  tasks: Task[];\n}\n\nconst defaultState = {\n  tasks: []\n};\n\nexport const reducer = (\n  state: AppState = defaultState,\n  action: FetchTasksAction\n) => {\n  switch (action.type) {\n    case 'FETCH_TASKS':\n      return {\n        ...state,\n        tasks: action.tasks\n      };\n  }\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}