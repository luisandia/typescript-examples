{"ast":null,"code":"var _jsxFileName = \"/Users/luisandia/lsad/typescript/react-todo-ts/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withApollo } from '../lib/apollo';\nimport { useTasksQuery, TaskStatus } from '../generated/graphql';\n\nconst IndexPage = props => {\n  const {\n    loading,\n    error,\n    data\n  } = useTasksQuery({\n    variables: {\n      status: TaskStatus.Active\n    }\n  });\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else if (error) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    }, \"An error occurred.\");\n  }\n\n  const tasks = data === null || data === void 0 ? void 0 : data.tasks;\n  return tasks && tasks.length ? __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, tasks.map(task => {\n    return __jsx(\"li\", {\n      key: task.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 16\n      }\n    }, task.title);\n  })) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, \"There are no tasks here.\");\n};\n\nconst IndexPageWithApollo = withApollo(IndexPage);\nexport default IndexPageWithApollo;","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/pages/index.tsx"],"names":["React","withApollo","useTasksQuery","TaskStatus","IndexPage","props","loading","error","data","variables","status","Active","tasks","length","map","task","id","title","IndexPageWithApollo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,sBAA1C;;AAMA,MAAMC,SAAwC,GAAGC,KAAK,IAAI;AACxD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,aAAa,CAAC;AAC7CO,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEP,UAAU,CAACQ;AAArB;AADkC,GAAD,CAA9C;;AAIA,MAAIL,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFD,MAEO,IAAIC,KAAJ,EAAW;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD;;AACD,QAAMK,KAAK,GAAGJ,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEI,KAApB;AAEA,SAAOA,KAAK,IAAIA,KAAK,CAACC,MAAf,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI;AACjB,WAAO;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACE,KAAxB,CAAP;AACD,GAFA,CADH,CADK,GAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAPF;AASD,CArBD;;AAuBA,MAAMC,mBAAmB,GAAGjB,UAAU,CAACG,SAAD,CAAtC;AAEA,eAAec,mBAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { withApollo } from '../lib/apollo';\nimport { useTasksQuery, TaskStatus } from '../generated/graphql';\n\ninterface InitialProps {}\n\ninterface Props extends InitialProps {}\n\nconst IndexPage: NextPage<Props, InitialProps> = props => {\n  const { loading, error, data } = useTasksQuery({\n    variables: { status: TaskStatus.Active }\n  });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  } else if (error) {\n    return <p>An error occurred.</p>;\n  }\n  const tasks = data?.tasks;\n\n  return tasks && tasks.length ? (\n    <ul>\n      {tasks.map(task => {\n        return <li key={task.id}>{task.title}</li>;\n      })}\n    </ul>\n  ) : (\n    <p>There are no tasks here.</p>\n  );\n};\n\nconst IndexPageWithApollo = withApollo(IndexPage);\n\nexport default IndexPageWithApollo;\n"]},"metadata":{},"sourceType":"module"}