{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/luisandia/lsad/typescript/react-todo-ts/pages/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withApollo } from '../lib/apollo';\nimport { useTasksQuery, TaskStatus } from '../generated/graphql';\nimport { compose } from 'recompose';\n\nvar IndexPage = function IndexPage(props) {\n  var _useTasksQuery = useTasksQuery({\n    variables: {\n      status: TaskStatus.Active\n    }\n  }),\n      loading = _useTasksQuery.loading,\n      error = _useTasksQuery.error,\n      data = _useTasksQuery.data;\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else if (error) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    }, \"An error occurred.\");\n  }\n\n  var tasks = data === null || data === void 0 ? void 0 : data.tasks;\n  return tasks && tasks.length ? __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, tasks.map(function (task) {\n    return __jsx(\"li\", {\n      key: task.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 16\n      }\n    }, task.title);\n  })) : __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, \"There are no tasks here.\");\n};\n\nvar IndexPageWithApollo = compose(withApollo({\n  ssr: true\n}) // withAuth(),\n)(IndexPage);\nexport default IndexPageWithApollo;","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/pages/index.tsx"],"names":["React","withApollo","useTasksQuery","TaskStatus","compose","IndexPage","props","variables","status","Active","loading","error","data","tasks","length","map","task","id","title","IndexPageWithApollo","ssr"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,sBAA1C;AACA,SAAQC,OAAR,QAAsB,WAAtB;;AAKA,IAAMC,SAAwC,GAAG,SAA3CA,SAA2C,CAAAC,KAAK,EAAI;AAAA,uBACvBJ,aAAa,CAAC;AAC7CK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEL,UAAU,CAACM;AAArB;AADkC,GAAD,CADU;AAAA,MAChDC,OADgD,kBAChDA,OADgD;AAAA,MACvCC,KADuC,kBACvCA,KADuC;AAAA,MAChCC,IADgC,kBAChCA,IADgC;;AAKxD,MAAIF,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFD,MAEO,IAAIC,KAAJ,EAAW;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD;;AACD,MAAME,KAAK,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEC,KAApB;AAEA,SAAOA,KAAK,IAAIA,KAAK,CAACC,MAAf,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI,EAAI;AACjB,WAAO;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACE,KAAxB,CAAP;AACD,GAFA,CADH,CADK,GAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAPF;AASD,CArBD;;AAuBA,IAAMC,mBAAmB,GAAIf,OAAO,CAClCH,UAAU,CAAC;AAAEmB,EAAAA,GAAG,EAAE;AAAP,CAAD,CADwB,CAElC;AAFkC,CAAP,CAG3Bf,SAH2B,CAA7B;AAIA,eAAec,mBAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { withApollo } from '../lib/apollo';\nimport { useTasksQuery, TaskStatus } from '../generated/graphql';\nimport {compose} from 'recompose';\ninterface InitialProps {}\n\ninterface Props extends InitialProps {}\n\nconst IndexPage: NextPage<Props, InitialProps> = props => {\n  const { loading, error, data } = useTasksQuery({\n    variables: { status: TaskStatus.Active }\n  });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  } else if (error) {\n    return <p>An error occurred.</p>;\n  }\n  const tasks = data?.tasks;\n\n  return tasks && tasks.length ? (\n    <ul>\n      {tasks.map(task => {\n        return <li key={task.id}>{task.title}</li>;\n      })}\n    </ul>\n  ) : (\n    <p>There are no tasks here.</p>\n  );\n};\n\nconst IndexPageWithApollo =  compose(\n  withApollo({ ssr: true }),\n  // withAuth(),\n)(IndexPage);\nexport default IndexPageWithApollo;\n"]},"metadata":{},"sourceType":"module"}