{"ast":null,"code":"var _jsxFileName = \"/Users/luisandia/lsad/typescript/react-todo-ts/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient';\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\n\n\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n  // TODO: Add proper types here:\n  // https://github.com/zeit/next.js/issues/9542\n\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n\n  apolloClient.toJSON = () => null; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        const {\n          AppTree\n        } = ctx; // When redirecting, the response is finished.\n        // No point in continuing to render\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if dataFromTree is enabled\n\n\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr'); // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread({}, pageProps, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient\n                })\n              };\n            } // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            // eslint-disable-next-line react/jsx-props-no-spreading\n\n\n            await getDataFromTree(__jsx(AppTree, _extends({}, props, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 35\n              }\n            })));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      }\n\n      return _objectSpread({}, pageProps, {\n        // Extract query data from the Apollo store\n        apolloState: apolloClient === null || apolloClient === void 0 ? void 0 : apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/lib/apollo.tsx"],"names":["React","App","Head","ApolloProvider","createApolloClient","globalApolloClient","initApolloClient","initialState","ctx","initOnContext","inAppContext","Boolean","console","warn","apolloClient","apolloState","toJSON","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport App, { AppContext } from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { NextPageContext, NextPage } from 'next';\nimport createApolloClient from '../apolloClient';\n\ninterface NextPageContextWithApollo extends NextPageContext {\n  apolloClient: ApolloClient<any> | null;\n  apolloState: NormalizedCacheObject;\n  ctx: NextPageContextApp;\n}\n\ntype NextPageContextApp = NextPageContextWithApollo & AppContext;\n\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState: NormalizedCacheObject, ctx?: NextPageContext) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = (ctx: NextPageContextApp): NextPageContextApp => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n',\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  // TODO: Add proper types here:\n  // https://github.com/zeit/next.js/issues/9542\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent: NextPage): ReactNode => {\n  const WithApollo = ({\n    apolloClient,\n    apolloState,\n    ...pageProps\n  }: {\n    apolloClient: ApolloClient<NormalizedCacheObject>;\n    apolloState: NormalizedCacheObject;\n  }): ReactNode => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: NextPageContextApp): Promise<object> => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props: any;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient?.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        apolloClient: ctx.apolloClient,\n      };\n    };\n  }\n\n  return WithApollo;\n};"]},"metadata":{},"sourceType":"module"}