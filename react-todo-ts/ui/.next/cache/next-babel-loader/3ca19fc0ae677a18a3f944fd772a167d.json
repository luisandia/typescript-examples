{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport let CacheControlScope;\n\n(function (CacheControlScope) {\n  CacheControlScope[\"Public\"] = \"PUBLIC\";\n  CacheControlScope[\"Private\"] = \"PRIVATE\";\n})(CacheControlScope || (CacheControlScope = {}));\n\nexport let TaskStatus;\n\n(function (TaskStatus) {\n  TaskStatus[\"Active\"] = \"active\";\n  TaskStatus[\"Completed\"] = \"completed\";\n})(TaskStatus || (TaskStatus = {}));\n\nexport const TasksDocument = gql`\n    query Tasks($status: TaskStatus) {\n  tasks(status: $status) {\n    id\n    title\n    status\n  }\n}\n    `;\n/**\n * __useTasksQuery__\n *\n * To run a query within a React component, call `useTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTasksQuery({\n *   variables: {\n *      status: // value for 'status'\n *   },\n * });\n */\n\nexport function useTasksQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(TasksDocument, baseOptions);\n}\nexport function useTasksLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(TasksDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","CacheControlScope","TaskStatus","TasksDocument","useTasksQuery","baseOptions","useQuery","useTasksLazyQuery","useLazyQuery"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAcA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AA8DZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AA0BZ,OAAO,MAAMC,aAAa,GAAGJ,GAAI;;;;;;;;KAA1B;AAUP;;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASK,aAAT,CAAuBC,WAAvB,EAAyG;AACxG,SAAOL,gBAAgB,CAACM,QAAjB,CAA2DH,aAA3D,EAA0EE,WAA1E,CAAP;AACD;AACP,OAAO,SAASE,iBAAT,CAA2BF,WAA3B,EAAiH;AAC9G,SAAOL,gBAAgB,CAACQ,YAAjB,CAA+DL,aAA/D,EAA8EE,WAA9E,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any,\n};\n\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type CreateTaskInput = {\n  title: Scalars['String'],\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  createTask?: Maybe<Task>,\n  updateTask?: Maybe<Task>,\n  changeStatus?: Maybe<Task>,\n  deleteTask?: Maybe<Task>,\n};\n\n\nexport type MutationCreateTaskArgs = {\n  input: CreateTaskInput\n};\n\n\nexport type MutationUpdateTaskArgs = {\n  input: UpdateTaskInput\n};\n\n\nexport type MutationChangeStatusArgs = {\n  id: Scalars['Int'],\n  status: TaskStatus\n};\n\n\nexport type MutationDeleteTaskArgs = {\n  id: Scalars['Int']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello?: Maybe<Scalars['String']>,\n  tasks: Array<Task>,\n  task?: Maybe<Task>,\n};\n\n\nexport type QueryTasksArgs = {\n  status?: Maybe<TaskStatus>\n};\n\n\nexport type QueryTaskArgs = {\n  id: Scalars['Int']\n};\n\nexport type Task = {\n   __typename?: 'Task',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  status: TaskStatus,\n};\n\nexport enum TaskStatus {\n  Active = 'active',\n  Completed = 'completed'\n}\n\nexport type UpdateTaskInput = {\n  id: Scalars['Int'],\n  title?: Maybe<Scalars['String']>,\n  status?: Maybe<TaskStatus>,\n};\n\n\nexport type TasksQueryVariables = {\n  status?: Maybe<TaskStatus>\n};\n\n\nexport type TasksQuery = (\n  { __typename?: 'Query' }\n  & { tasks: Array<(\n    { __typename?: 'Task' }\n    & Pick<Task, 'id' | 'title' | 'status'>\n  )> }\n);\n\n\nexport const TasksDocument = gql`\n    query Tasks($status: TaskStatus) {\n  tasks(status: $status) {\n    id\n    title\n    status\n  }\n}\n    `;\n\n/**\n * __useTasksQuery__\n *\n * To run a query within a React component, call `useTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTasksQuery({\n *   variables: {\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TasksQuery, TasksQueryVariables>) {\n        return ApolloReactHooks.useQuery<TasksQuery, TasksQueryVariables>(TasksDocument, baseOptions);\n      }\nexport function useTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TasksQuery, TasksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TasksQuery, TasksQueryVariables>(TasksDocument, baseOptions);\n        }\nexport type TasksQueryHookResult = ReturnType<typeof useTasksQuery>;\nexport type TasksLazyQueryHookResult = ReturnType<typeof useTasksLazyQuery>;\nexport type TasksQueryResult = ApolloReactCommon.QueryResult<TasksQuery, TasksQueryVariables>;"]},"metadata":{},"sourceType":"module"}