{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/luisandia/lsad/typescript/react-todo-ts/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, apolloClient, pageProps, _await$import, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n\n              apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 24;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _await$import = _context.sent;\n              getDataFromTree = _await$import.getDataFromTree;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 15\n                }\n              })));\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 23:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 24:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[11, 20]], Promise);\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3001/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/lib/apollo.tsx"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nimport { NextPage } from 'next';\n\nexport type ApolloClientCache = any;\n\nlet apolloClient: ApolloClient<ApolloClientCache> | null = null;\n\ninterface WithApolloInitialProps {\n  apolloState?: ApolloClientCache;\n}\n\ninterface WithApolloProps extends WithApolloInitialProps {\n  apolloClient?: ApolloClient<ApolloClientCache>;\n}\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo<\n  PageProps extends object,\n  PageInitialProps = PageProps\n>(PageComponent: NextPage<PageProps, PageInitialProps>, { ssr = true } = {}) {\n  const WithApollo: NextPage<\n    PageProps & WithApolloProps,\n    PageInitialProps & WithApolloInitialProps\n  > = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...(pageProps as PageProps)} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {} as PageInitialProps;\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState?: ApolloClientCache) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState: ApolloClientCache = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3001/graphql', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}