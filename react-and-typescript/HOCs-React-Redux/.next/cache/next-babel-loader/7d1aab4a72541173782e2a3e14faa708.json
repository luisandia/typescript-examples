{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/luisandia/lsad/typescript/react-and-typescript/HOCs-React-Redux/components/TaskList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTasks as _fetchTasks } from '../actions';\nexport var TaskList = /*#__PURE__*/function (_React$Component) {\n  _inherits(TaskList, _React$Component);\n\n  var _super = _createSuper(TaskList);\n\n  function TaskList() {\n    var _this;\n\n    _classCallCheck(this, TaskList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function () {\n      var fetchTasks = _this.props.fetchTasks;\n      fetchTasks();\n    });\n\n    return _this;\n  }\n\n  _createClass(TaskList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tasks = this.props.tasks;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      }, __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, tasks.map(function (task, i) {\n        return __jsx(\"li\", {\n          key: i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 20\n          }\n        }, task.title);\n      })), __jsx(\"button\", {\n        onClick: this.onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, \"Fetch Tasks\"));\n    }\n  }]);\n\n  return TaskList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchTasks: function fetchTasks() {\n      return dispatch(_fetchTasks());\n    }\n  };\n};\n\nexport var ConnectedTaskList = connect(mapStateToProps, mapDispatchToProps)(TaskList);","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-and-typescript/HOCs-React-Redux/components/TaskList.tsx"],"names":["React","connect","fetchTasks","TaskList","props","tasks","map","task","i","title","onClick","Component","mapStateToProps","state","mapDispatchToProps","dispatch","ConnectedTaskList"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAU,IAAVA,WAAT,QAA6C,YAA7C;AAgBA,WAAaC,QAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,8DACY,YAAM;AAAA,UACND,UADM,GACS,MAAKE,KADd,CACNF,UADM;AAEdA,MAAAA,UAAU;AACX,KAJH;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAMW;AAAA;;AAAA,UACCG,KADD,GACW,KAAKD,KADhB,CACCC,KADD;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACtB,eAAO;AAAI,UAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaD,IAAI,CAACE,KAAlB,CAAP;AACD,OAFA,CADH,CADF,EAME;AAAQ,QAAA,OAAO,EAAE,KAAKC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANF,CADF;AAUD;AAlBH;;AAAA;AAAA,EAA8BV,KAAK,CAACW,SAApC;;AAqBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAqB;AAC3C,SAAO;AACLR,IAAAA,KAAK,EAAEQ,KAAK,CAACR;AADR,GAAP;AAGD,CAJD;;AAMA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAwB;AACjD,SAAO;AACLb,IAAAA,UAAU,EAAE;AAAA,aAAMa,QAAQ,CAACb,WAAU,EAAX,CAAd;AAAA;AADP,GAAP;AAGD,CAJD;;AAKA,OAAO,IAAMc,iBAAiB,GAAGf,OAAO,CACtCW,eADsC,EAEtCE,kBAFsC,CAAP,CAG/BX,QAH+B,CAA1B","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { AppState } from '../reducer';\nimport { fetchTasks, FetchTasksAction } from '../actions';\nimport { Task } from '../types';\nimport { Dispatch } from 'redux';\n\ninterface OwnProps {}\n\ninterface StateProps {\n  tasks: Task[];\n}\n\ninterface DispatchProps {\n  fetchTasks: () => void;\n}\n\ninterface AllProps extends StateProps, DispatchProps, OwnProps {}\n\nexport class TaskList extends React.Component<AllProps> {\n  onClick = () => {\n    const { fetchTasks } = this.props;\n    fetchTasks();\n  };\n\n  render() {\n    const { tasks } = this.props;\n    return (\n      <div>\n        <ul>\n          {tasks.map((task, i) => {\n            return <li key={i}>{task.title}</li>;\n          })}\n        </ul>\n        <button onClick={this.onClick}>Fetch Tasks</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    tasks: state.tasks,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    fetchTasks: () => dispatch(fetchTasks()),\n  };\n};\nexport const ConnectedTaskList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskList);\n"]},"metadata":{},"sourceType":"module"}