{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/luisandia/lsad/typescript/react-todo-ts/lib/apollo.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient';\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nvar globalApolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nvar initApolloClient = function initApolloClient(initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\n\n\nexport var initOnContext = function initOnContext(ctx) {\n  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n  // TODO: Add proper types here:\n  // https://github.com/zeit/next.js/issues/9542\n\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n\n  apolloClient.toJSON = function () {\n    return null;\n  }; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\nexport var withApollo = function withApollo() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref2) {\n      var apolloClient = _ref2.apolloClient,\n          apolloState = _ref2.apolloState,\n          pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n      var client;\n\n      if (apolloClient) {\n        // Happens on: getDataFromTree & next.js ssr\n        client = apolloClient;\n      } else {\n        // Happens on: next.js csr\n        client = initApolloClient(apolloState, undefined);\n      }\n\n      return __jsx(ApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }\n      }, __jsx(PageComponent, _extends({}, pageProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      })));\n    }; // Set the correct displayName in development\n\n\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n      WithApollo.getInitialProps = function _callee(ctx) {\n        var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _await$import, getDataFromTree, props;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                inAppContext = Boolean(ctx.ctx);\n                _initOnContext = initOnContext(ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n              case 6:\n                pageProps = _context.sent;\n                _context.next = 13;\n                break;\n\n              case 9:\n                if (!inAppContext) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 12;\n                return _regeneratorRuntime.awrap(App.getInitialProps(ctx));\n\n              case 12:\n                pageProps = _context.sent;\n\n              case 13:\n                if (!false) {\n                  _context.next = 32;\n                  break;\n                }\n\n                AppTree = ctx.AppTree; // When redirecting, the response is finished.\n                // No point in continuing to render\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 17:\n                if (!(ssr && AppTree)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                _context.prev = 18;\n                _context.next = 21;\n                return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n              case 21:\n                _await$import = _context.sent;\n                getDataFromTree = _await$import.getDataFromTree;\n\n                if (inAppContext) {\n                  props = _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  });\n                } else {\n                  props = {\n                    pageProps: _objectSpread({}, pageProps, {\n                      apolloClient: apolloClient\n                    })\n                  };\n                } // Take the Next.js AppTree, determine which queries are needed to render,\n                // and fetch them. This method can be pretty slow since it renders\n                // your entire AppTree once for every query. Check out apollo fragments\n                // if you want to reduce the number of rerenders.\n                // https://www.apollographql.com/docs/react/data/fragments/\n                // eslint-disable-next-line react/jsx-props-no-spreading\n\n\n                _context.next = 26;\n                return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, _extends({}, props, {\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 35\n                  }\n                }))));\n\n              case 26:\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](18);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 31:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 32:\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  // Extract query data from the Apollo store\n                  apolloState: apolloClient === null || apolloClient === void 0 ? void 0 : apolloClient.cache.extract(),\n                  // Provide the client for ssr. As soon as this payload\n                  apolloClient: ctx.apolloClient\n                }));\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[18, 28]], Promise);\n      };\n    }\n\n    return WithApollo;\n  };\n};","map":{"version":3,"sources":["/Users/luisandia/lsad/typescript/react-todo-ts/lib/apollo.tsx"],"names":["React","App","Head","ApolloProvider","createApolloClient","globalApolloClient","initApolloClient","initialState","ctx","initOnContext","inAppContext","Boolean","console","warn","apolloClient","apolloState","toJSON","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgC,UAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAIA,OAAOC,kBAAP,MAA+B,iBAA/B;AAUA;AACA;AACA,IAAIC,kBAA8D,GAAG,IAArE;AAEA;;;;;;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD,EAAsCC,GAAtC,EAAgE;AACvF;AACA;AACA,aAAmC;AACjC,WAAOJ,kBAAkB,CAACG,YAAD,EAAeC,GAAf,CAAzB;AACD,GALsF,CAOvF;;;AACA,MAAI,CAACH,kBAAL,EAAyB;AACvBA,IAAAA,kBAAkB,GAAGD,kBAAkB,CAACG,YAAD,EAAeC,GAAf,CAAvC;AACD;;AAED,SAAOH,kBAAP;AACD,CAbD;AAeA;;;;;;;;AAMA,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACD,GAAD,EAAiD;AAC5E,MAAME,YAAY,GAAGC,OAAO,CAACH,GAAG,CAACA,GAAL,CAA5B,CAD4E,CAG5E;AACA;;AACA,YAA4C;AAC1C,QAAIE,YAAJ,EAAkB;AAChBE,MAAAA,OAAO,CAACC,IAAR,CACE,wGACE,sEAFJ;AAID;AACF,GAZ2E,CAc5E;AACA;AACA;;;AACA,MAAMC,YAAY,GAAGN,GAAG,CAACM,YAAJ,IAAoBR,gBAAgB,CAACE,GAAG,CAACO,WAAJ,IAAmB,EAApB,EAAwBL,YAAY,GAAGF,GAAG,CAACA,GAAP,GAAaA,GAAjD,CAAzD,CAjB4E,CAmB5E;AACA;AACA;AACA;AACA;AACA;;AACAM,EAAAA,YAAY,CAACE,MAAb,GAAsB;AAAA,WAAM,IAAN;AAAA,GAAtB,CAzB4E,CA2B5E;AACA;AACA;;;AACAR,EAAAA,GAAG,CAACM,YAAJ,GAAmBA,YAAnB;;AACA,MAAIJ,YAAJ,EAAkB;AAChBF,IAAAA,GAAG,CAACA,GAAJ,CAAQM,YAAR,GAAuBA,YAAvB;AACD;;AAED,SAAON,GAAP;AACD,CApCM;AAsCP;;;;;;;;;AAQA,OAAO,IAAMS,UAAU,GAAG,SAAbA,UAAa;AAAA,iFAAmB,EAAnB;AAAA,sBAAGC,GAAH;AAAA,MAAGA,GAAH,yBAAS,KAAT;;AAAA,SAA0B,UAACC,aAAD,EAAwC;AAC1F,QAAMC,UAAU,GAAG,SAAbA,UAAa,QAOF;AAAA,UANfN,YAMe,SANfA,YAMe;AAAA,UALfC,WAKe,SALfA,WAKe;AAAA,UAJZM,SAIY;;AACf,UAAIC,MAAJ;;AACA,UAAIR,YAAJ,EAAkB;AAChB;AACAQ,QAAAA,MAAM,GAAGR,YAAT;AACD,OAHD,MAGO;AACL;AACAQ,QAAAA,MAAM,GAAGhB,gBAAgB,CAACS,WAAD,EAAcQ,SAAd,CAAzB;AACD;;AAED,aACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD,KAtBD,CAD0F,CAyB1F;;;AACA,cAA2C;AACzC,UAAMG,WAAW,GAAGL,aAAa,CAACK,WAAd,IAA6BL,aAAa,CAACM,IAA3C,IAAmD,WAAvE;AACAL,MAAAA,UAAU,CAACI,WAAX,wBAAuCA,WAAvC;AACD;;AAED,QAAIN,GAAG,IAAIC,aAAa,CAACO,eAAzB,EAA0C;AACxCN,MAAAA,UAAU,CAACM,eAAX,GAA6B,iBAAOlB,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBE,gBAAAA,YADqB,GACNC,OAAO,CAACH,GAAG,CAACA,GAAL,CADD;AAAA,iCAEFC,aAAa,CAACD,GAAD,CAFX,EAEnBM,YAFmB,kBAEnBA,YAFmB,EAI3B;;AACIO,gBAAAA,SALuB,GAKX,EALW;;AAAA,qBAMvBF,aAAa,CAACO,eANS;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAOPP,aAAa,CAACO,eAAd,CAA8BlB,GAA9B,CAPO;;AAAA;AAOzBa,gBAAAA,SAPyB;AAAA;AAAA;;AAAA;AAAA,qBAQhBX,YARgB;AAAA;AAAA;AAAA;;AAAA;AAAA,iDASPT,GAAG,CAACyB,eAAJ,CAAoBlB,GAApB,CATO;;AAAA;AASzBa,gBAAAA,SATyB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcjBM,gBAAAA,OAdiB,GAcLnB,GAdK,CAcjBmB,OAdiB,EAezB;AACA;;AAhByB,sBAiBrBnB,GAAG,CAACoB,GAAJ,IAAWpB,GAAG,CAACoB,GAAJ,CAAQC,QAjBE;AAAA;AAAA;AAAA;;AAAA,iDAkBhBR,SAlBgB;;AAAA;AAAA,sBAsBrBH,GAAG,IAAIS,OAtBc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iDA0Ba,OAAO,mBAAP,CA1Bb;;AAAA;AAAA;AA0BbG,gBAAAA,eA1Ba,iBA0BbA,eA1Ba;;AA+BrB,oBAAIpB,YAAJ,EAAkB;AAChBqB,kBAAAA,KAAK,qBAAQV,SAAR;AAAmBP,oBAAAA,YAAY,EAAZA;AAAnB,oBAAL;AACD,iBAFD,MAEO;AACLiB,kBAAAA,KAAK,GAAG;AAAEV,oBAAAA,SAAS,oBAAOA,SAAP;AAAkBP,sBAAAA,YAAY,EAAZA;AAAlB;AAAX,mBAAR;AACD,iBAnCoB,CAqCrB;AACA;AACA;AACA;AACA;AACA;;;AA1CqB;AAAA,iDA2CfgB,eAAe,CAAC,MAAC,OAAD,eAAaC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAD,CA3CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6CrB;AACA;AACA;AACAnB,gBAAAA,OAAO,CAACoB,KAAR,CAAc,uCAAd;;AAhDqB;AAmDvB;AACA;AACA9B,gBAAAA,IAAI,CAAC+B,MAAL;;AArDuB;AAAA,mEA0DtBZ,SA1DsB;AA2DzB;AACAN,kBAAAA,WAAW,EAAED,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEoB,KAAd,CAAoBC,OAApB,EA5DY;AA6DzB;AACArB,kBAAAA,YAAY,EAAEN,GAAG,CAACM;AA9DO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA7B;AAiED;;AAED,WAAOM,UAAP;AACD,GApGyB;AAAA,CAAnB","sourcesContent":["import React, { ReactNode } from 'react';\nimport App, { AppContext } from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { NextPageContext, NextPage } from 'next';\nimport createApolloClient from '../apolloClient';\n\ninterface NextPageContextWithApollo extends NextPageContext {\n  apolloClient: ApolloClient<any> | undefined;\n  apolloState: NormalizedCacheObject;\n  ctx: NextPageContextApp;\n}\n\ntype NextPageContextApp = NextPageContextWithApollo & AppContext;\n\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState: NormalizedCacheObject, ctx?: NextPageContext) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = (ctx: NextPageContextApp): NextPageContextApp => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n',\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  // TODO: Add proper types here:\n  // https://github.com/zeit/next.js/issues/9542\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent: NextPage): ReactNode => {\n  const WithApollo = ({\n    apolloClient,\n    apolloState,\n    ...pageProps\n  }: {\n    apolloClient: ApolloClient<NormalizedCacheObject>;\n    apolloState: NormalizedCacheObject;\n  }): ReactNode => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: NextPageContextApp): Promise<object> => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props: any;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient?.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        apolloClient: ctx.apolloClient,\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}